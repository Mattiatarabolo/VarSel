env_pred <- matrix(0, length(t), env_num)
for (j in 1:env_num){env_pred[,j] = predict(spline_result[[env_name[j]]], t)$y}
return(env_pred)
}
# In order to perform computation, the env_func is tabulated
# control from lower_bound -10%, upper_bound + 10%
lower_bound_control <- 0.10
upper_bound_control <- 0.10
lower_bound <- as.double(0)
upper_bound <- tot_time
upper_bound_tab <- upper_bound + upper_bound_control*(upper_bound-lower_bound)
lower_bound_tab <- lower_bound - lower_bound_control*(upper_bound-lower_bound)
# Tabulation of the function from lower_bound -10%, to upper_bound + 10%
time_tabulated <- seq(from = lower_bound_tab, to = upper_bound_tab, length.out = 1 + 1e6)
env_tabulated <- env_func(time_tabulated)
# Tabulated function
env_func_tab <- function(t){
# number of intervals
n <- NROW(env_tabulated) - 1
index <- 1 + as.integer( (t - lower_bound_tab) * n / (upper_bound_tab - lower_bound_tab))
return(matrix(env_tabulated[index,], length(t), env_num))
}
rm(env_data, env_list, spline_result, time_env, tot_times_env, dof, lower_bound, lower_bound_control, name, time_tabulated,
upper_bound, upper_bound_control, env_func)
par_names <- c("lambda_0", "mu_0", "theta_1", "theta_2")
# Setting the parameters
if (extinction_rate == "const") {
par <- c(0.1, 0.01, 1.3, -0.5)
names(par) = par_names
} else if (extinction_rate == "ratio") {
par <- c(0.08, 0.06, 2, -0.2)
names(par) = par_names
}
# Choice of the extinction rate
f.lamb <- function(t, env){par[1]*exp(env%*%par[3:4])}
if (extinction_rate == "const") {
f.mu <- function(t, env){par[2]}
} else if (extinction_rate == "ratio") {
f.mu <- function(t, env){par[2]*f.lamb(t, env)}
}
phylo <- NULL
while(class(phylo) != "phylo"){
phylo <- sim_env_bd_mod_c(env.func = env_func_tab, f.lamb = f.lamb, f.mu = f.mu, time.stop = tot_time,
max.size = 3000, return.all.extinct = TRUE, prune.extinct = TRUE)$tree
}
plot(phylo)
size = c()
for (i in 1:500){
phylo <- NULL
while(class(phylo) != "phylo"){
phylo <- sim_env_bd_mod_c(env.func = env_func_tab, f.lamb = f.lamb, f.mu = f.mu, time.stop = tot_time, return.all.extinct = TRUE, max.size = 3000,
prune.extinct = F)$tree
}
size = c(size, length(phylo$tip.label))
}
library(RPANDA)
function (data = NA, nrow = 1, ncol = 1, byrow = FALSE, dimnames = NULL)
library(RPANDA)
sessionInfo()
#############################################################################################################
###################                                                                       ###################
###################                            FUNCTIONS DEFINITION                       ###################
###################                                                                       ###################
#############################################################################################################
source("./Functions/sim_env_bd_mod_c.R")
tot_time <- 52  #Total time of the phylogeny
# Environmental function definition
load("./Data/InfTemp.R")
load("./Data/co2.R")
load("./Data/sealevel.R")
data("silica")
load("./Data/d13c.R")
env_list <- list("Temperature" = InfTemp, "CO2" = co2, "SeaLevel" = sealevel, "d13C" = d13c, "Silica" = silica)
env_list_names = c("Temperature", "CO2", "SeaLevel", "d13C" , "Silica")
env_num_tot <- length(env_list)
env_name <- "Temperature"
env_num <- 1
time_env <- list()
tot_times_env <- list()
env_data <- list()
env_scales <- list()
env_baseline <- list()
for(name in env_name){
time_env[[name]] <- env_list[[name]][env_list[[name]][,1] <= tot_time, 1]
tot_times_env[[name]] <- max(env_list[[name]][env_list[[name]][,1] <= tot_time, 1])
env_scales[[name]] <-  max((env_list[[name]][env_list[[name]][,1] <= tot_time,2]-min(env_list[[name]][env_list[[name]][,1] <= tot_time,2])))
env_baseline[[name]] <- min(env_list[[name]][env_list[[name]][,1] <= tot_time,2])
env_data[[name]] <- (env_list[[name]][env_list[[name]][,1] <= tot_time,2] - env_baseline[[name]])/env_scales[[name]]#curves standardization
}
tot_time_env <- Reduce(min, tot_times_env)
if(tot_time_env < tot_time){print("!!!WARNING!!! tot_time_env < tot_phylo_time")}
rm(InfTemp, co2, sealevel, silica, d13c)
# Smoothing of the env data and environmental function
dof <- c(500, 30, rep(500, 2), 30) # degrees of freedom for the smoothing of the environmental functions
names(dof) = env_list_names
spline_result <- list()
for(name in env_name){
spline_result[[name]] <- smooth.spline(time_env[[name]], env_data[[name]], df = dof[[name]])
}
env_func <- function(t) {
env_pred <- matrix(0, length(t), env_num)
for (j in 1:env_num){env_pred[,j] = predict(spline_result[[env_name[j]]], t)$y}
return(env_pred)
}
# In order to perform computation, the env_func is tabulated
# control from lower_bound -10%, upper_bound + 10%
lower_bound_control <- 0.10
upper_bound_control <- 0.10
lower_bound <- as.double(0)
upper_bound <- tot_time
upper_bound_tab <- upper_bound + upper_bound_control*(upper_bound-lower_bound)
lower_bound_tab <- lower_bound - lower_bound_control*(upper_bound-lower_bound)
# Tabulation of the function from lower_bound -10%, to upper_bound + 10%
time_tabulated <- seq(from = lower_bound_tab, to = upper_bound_tab, length.out = 1 + 1e6)
env_tabulated <- env_func(time_tabulated)
# Tabulated function
env_func_tab <- function(t){
# number of intervals
n <- NROW(env_tabulated) - 1
index <- 1 + as.integer( (t - lower_bound_tab) * n / (upper_bound_tab - lower_bound_tab))
return(matrix(env_tabulated[index,], length(t), env_num))
}
rm(env_data, env_list, spline_result, time_env, tot_times_env, dof, lower_bound, lower_bound_control, name, time_tabulated,
upper_bound, upper_bound_control, env_func)
par_names <- c("lambda_0", "mu_0", "theta")
# Setting the parameters
if (extinction_rate == "const") {
par <- c(0.1, 0.01, 0.7)
names(par) = par_names
} else if (extinction_rate == "ratio") {
par <- c(0.1, 0.01, 0.7)
names(par) = par_names
}
# Choice of the extinction rate
f.lamb <- function(t, env){par[1]*exp(env*par[3])}
if (extinction_rate == "const") {
f.mu <- function(t, env){par[2]}
} else if (extinction_rate == "ratio") {
f.mu <- function(t, env){par[2]*f.lamb(t, env)}
}
phylo <- NULL
while(class(phylo) != "phylo"){
phylo <- sim_env_bd_mod_c(env.func = env_func_tab, f.lamb = f.lamb, f.mu = f.mu, time.stop = tot_time,
max.size = 3000, return.all.extinct = TRUE, prune.extinct = F)$tree
}
size = c()
for (i in 1:500){
phylo <- NULL
while(class(phylo) != "phylo"){
phylo <- sim_env_bd_mod_c(env.func = env_func_tab, f.lamb = f.lamb, f.mu = f.mu, time.stop = tot_time, return.all.extinct = TRUE, max.size = 3000,
prune.extinct = T)$tree
}
size = c(size, length(phylo$tip.label))
}
df = data.frame(a, size)
a = rep(1,500)
df = data.frame(a, size)
plot(ggplot(df, aes(x=a, y = size)) + geom_violin() + coord_flip())
library(ggplot2)
plot(ggplot(df, aes(x=a, y = size)) + geom_violin() + coord_flip())
env_name <- c("Temperature", "CO2")
env_num <- 2
time_env <- list()
tot_times_env <- list()
env_data <- list()
env_scales <- list()
env_baseline <- list()
for(name in env_name){
time_env[[name]] <- env_list[[name]][env_list[[name]][,1] <= tot_time, 1]
tot_times_env[[name]] <- max(env_list[[name]][env_list[[name]][,1] <= tot_time, 1])
env_scales[[name]] <-  max((env_list[[name]][env_list[[name]][,1] <= tot_time,2]-min(env_list[[name]][env_list[[name]][,1] <= tot_time,2])))
env_baseline[[name]] <- min(env_list[[name]][env_list[[name]][,1] <= tot_time,2])
env_data[[name]] <- (env_list[[name]][env_list[[name]][,1] <= tot_time,2] - env_baseline[[name]])/env_scales[[name]]#curves standardization
}
tot_time_env <- Reduce(min, tot_times_env)
if(tot_time_env < tot_time){print("!!!WARNING!!! tot_time_env < tot_phylo_time")}
#rm(InfTemp, co2, sealevel, silica, d13c)
# Smoothing of the env data and environmental function
dof <- c(500, 30, rep(500, 2), 30)  # degrees of freedom for the smoothing of the environmental functions
names(dof) = env_list_names
spline_result <- list()
for(name in env_name){
spline_result[[name]] <- smooth.spline(time_env[[name]], env_data[[name]], df = dof[[name]])
}
env_func <- function(t) {
env_pred <- matrix(0, length(t), env_num)
for (j in 1:env_num){env_pred[,j] = predict(spline_result[[env_name[j]]], t)$y}
return(env_pred)
}
# In order to perform computation, the env_func is tabulated
# control from lower_bound -10%, upper_bound + 10%
lower_bound_control <- 0.10
upper_bound_control <- 0.10
lower_bound <- as.double(0)
upper_bound <- tot_time
upper_bound_tab <- upper_bound + upper_bound_control*(upper_bound-lower_bound)
lower_bound_tab <- lower_bound - lower_bound_control*(upper_bound-lower_bound)
# Tabulation of the function from lower_bound -10%, to upper_bound + 10%
time_tabulated <- seq(from = lower_bound_tab, to = upper_bound_tab, length.out = 1 + 1e6)
env_tabulated <- env_func(time_tabulated)
# Tabulated function
env_func_tab <- function(t){
# number of intervals
n <- NROW(env_tabulated) - 1
index <- 1 + as.integer( (t - lower_bound_tab) * n / (upper_bound_tab - lower_bound_tab))
return(matrix(env_tabulated[index,], length(t), env_num))
}
rm(env_data, env_list, spline_result, time_env, tot_times_env, dof, lower_bound, lower_bound_control, name, time_tabulated,
upper_bound, upper_bound_control, env_func)
par_names <- c("lambda_0", "mu_0", "theta_1", "theta_2")
# Setting the parameters
if (extinction_rate == "const") {
par <- c(0.1, 0.01, 1.3, -0.5)
names(par) = par_names
} else if (extinction_rate == "ratio") {
par <- c(0.08, 0.06, 2, -0.2)
names(par) = par_names
}
# Choice of the extinction rate
f.lamb <- function(t, env){par[1]*exp(env%*%par[3:4])}
if (extinction_rate == "const") {
f.mu <- function(t, env){par[2]}
} else if (extinction_rate == "ratio") {
f.mu <- function(t, env){par[2]*f.lamb(t, env)}
}
phylo <- NULL
while(class(phylo) != "phylo"){
phylo <- sim_env_bd_mod_c(env.func = env_func_tab, f.lamb = f.lamb, f.mu = f.mu, time.stop = tot_time,
max.size = 3000, return.all.extinct = TRUE, prune.extinct = TRUE)$tree
}
#################                     Phylogenetic tree simulation                   #########################
tot_time <- 52  #Total time of the phylogeny
# Environmental function definition
load("./Data/InfTemp.R")
load("./Data/co2.R")
load("./Data/sealevel.R")
data("silica")
load("./Data/d13c.R")
env_list <- list("Temperature" = InfTemp, "CO2" = co2, "SeaLevel" = sealevel, "d13C" = d13c, "Silica" = silica)
env_list_names = c("Temperature", "CO2", "SeaLevel", "d13C" , "Silica")
env_num_tot <- length(env_list)
env_num <- 2
time_env <- list()
tot_times_env <- list()
env_data <- list()
env_scales <- list()
env_baseline <- list()
for(name in env_name){
time_env[[name]] <- env_list[[name]][env_list[[name]][,1] <= tot_time, 1]
tot_times_env[[name]] <- max(env_list[[name]][env_list[[name]][,1] <= tot_time, 1])
env_scales[[name]] <-  max((env_list[[name]][env_list[[name]][,1] <= tot_time,2]-min(env_list[[name]][env_list[[name]][,1] <= tot_time,2])))
env_baseline[[name]] <- min(env_list[[name]][env_list[[name]][,1] <= tot_time,2])
env_data[[name]] <- (env_list[[name]][env_list[[name]][,1] <= tot_time,2] - env_baseline[[name]])/env_scales[[name]]#curves standardization
}
tot_time_env <- Reduce(min, tot_times_env)
if(tot_time_env < tot_time){print("!!!WARNING!!! tot_time_env < tot_phylo_time")}
#rm(InfTemp, co2, sealevel, silica, d13c)
# Smoothing of the env data and environmental function
dof <- c(500, 30, rep(500, 2), 30)  # degrees of freedom for the smoothing of the environmental functions
names(dof) = env_list_names
spline_result <- list()
for(name in env_name){
spline_result[[name]] <- smooth.spline(time_env[[name]], env_data[[name]], df = dof[[name]])
}
env_func <- function(t) {
env_pred <- matrix(0, length(t), env_num)
for (j in 1:env_num){env_pred[,j] = predict(spline_result[[env_name[j]]], t)$y}
return(env_pred)
}
# In order to perform computation, the env_func is tabulated
# control from lower_bound -10%, upper_bound + 10%
lower_bound_control <- 0.10
upper_bound_control <- 0.10
lower_bound <- as.double(0)
upper_bound <- tot_time
upper_bound_tab <- upper_bound + upper_bound_control*(upper_bound-lower_bound)
lower_bound_tab <- lower_bound - lower_bound_control*(upper_bound-lower_bound)
# Tabulation of the function from lower_bound -10%, to upper_bound + 10%
time_tabulated <- seq(from = lower_bound_tab, to = upper_bound_tab, length.out = 1 + 1e6)
env_tabulated <- env_func(time_tabulated)
# Tabulated function
env_func_tab <- function(t){
# number of intervals
n <- NROW(env_tabulated) - 1
index <- 1 + as.integer( (t - lower_bound_tab) * n / (upper_bound_tab - lower_bound_tab))
return(matrix(env_tabulated[index,], length(t), env_num))
}
rm(env_data, env_list, spline_result, time_env, tot_times_env, dof, lower_bound, lower_bound_control, name, time_tabulated,
upper_bound, upper_bound_control, env_func)
par_names <- c("lambda_0", "mu_0", "theta_1", "theta_2")
# Setting the parameters
if (extinction_rate == "const") {
par <- c(0.1, 0.01, 1.3, -0.5)
names(par) = par_names
} else if (extinction_rate == "ratio") {
par <- c(0.08, 0.06, 2, -0.2)
names(par) = par_names
}
# Choice of the extinction rate
f.lamb <- function(t, env){par[1]*exp(env%*%par[3:4])}
if (extinction_rate == "const") {
f.mu <- function(t, env){par[2]}
} else if (extinction_rate == "ratio") {
f.mu <- function(t, env){par[2]*f.lamb(t, env)}
}
phylo <- NULL
while(class(phylo) != "phylo"){
phylo <- sim_env_bd_mod_c(env.func = env_func_tab, f.lamb = f.lamb, f.mu = f.mu, time.stop = tot_time,
max.size = 3000, return.all.extinct = TRUE, prune.extinct = TRUE)$tree
}
size = c()
for (i in 1:500){
phylo <- NULL
while(class(phylo) != "phylo"){
phylo <- sim_env_bd_mod_c(env.func = env_func_tab, f.lamb = f.lamb, f.mu = f.mu, time.stop = tot_time, return.all.extinct = TRUE, max.size = 3000,
prune.extinct = T)$tree
}
size = c(size, length(phylo$tip.label))
}
df = data.frame(a, size)
plot(ggplot(df, aes(x=a, y = size)) + geom_violin() + coord_flip())
# Setting the parameters
if (extinction_rate == "const") {
par <- c(0.5, 0.01, 1.3, -0.5)
names(par) = par_names
} else if (extinction_rate == "ratio") {
par <- c(0.08, 0.06, 2, -0.2)
names(par) = par_names
}
# Choice of the extinction rate
f.lamb <- function(t, env){par[1]*exp(env%*%par[3:4])}
if (extinction_rate == "const") {
f.mu <- function(t, env){par[2]}
} else if (extinction_rate == "ratio") {
f.mu <- function(t, env){par[2]*f.lamb(t, env)}
}
size = c()
for (i in 1:500){
phylo <- NULL
while(class(phylo) != "phylo"){
phylo <- sim_env_bd_mod_c(env.func = env_func_tab, f.lamb = f.lamb, f.mu = f.mu, time.stop = tot_time, return.all.extinct = TRUE, max.size = 3000,
prune.extinct = T)$tree
}
size = c(size, length(phylo$tip.label))
}
df = data.frame(a, size)
plot(ggplot(df, aes(x=a, y = size)) + geom_violin() + coord_flip())
extinction_rate
# Setting the parameters
if (extinction_rate == "const") {
par <- c(0.05, 0.01, 1.3, -0.2)
names(par) = par_names
} else if (extinction_rate == "ratio") {
par <- c(0.08, 0.06, 2, -0.2)
names(par) = par_names
}
# Choice of the extinction rate
f.lamb <- function(t, env){par[1]*exp(env%*%par[3:4])}
if (extinction_rate == "const") {
f.mu <- function(t, env){par[2]}
} else if (extinction_rate == "ratio") {
f.mu <- function(t, env){par[2]*f.lamb(t, env)}
}
phylo <- NULL
while(class(phylo) != "phylo"){
phylo <- sim_env_bd_mod_c(env.func = env_func_tab, f.lamb = f.lamb, f.mu = f.mu, time.stop = tot_time,
max.size = 3000, return.all.extinct = TRUE, prune.extinct = TRUE)$tree
}
plot(phylo)
# Setting the parameters
if (extinction_rate == "const") {
par <- c(0.1, 0.01, 1.3, -0.2)
names(par) = par_names
} else if (extinction_rate == "ratio") {
par <- c(0.08, 0.06, 2, -0.2)
names(par) = par_names
}
# Choice of the extinction rate
f.lamb <- function(t, env){par[1]*exp(env%*%par[3:4])}
if (extinction_rate == "const") {
f.mu <- function(t, env){par[2]}
} else if (extinction_rate == "ratio") {
f.mu <- function(t, env){par[2]*f.lamb(t, env)}
}
phylo <- NULL
while(class(phylo) != "phylo"){
phylo <- sim_env_bd_mod_c(env.func = env_func_tab, f.lamb = f.lamb, f.mu = f.mu, time.stop = tot_time,
max.size = 3000, return.all.extinct = TRUE, prune.extinct = TRUE)$tree
}
plot(phylo)
size = c()
for (i in 1:500){
phylo <- NULL
while(class(phylo) != "phylo"){
phylo <- sim_env_bd_mod_c(env.func = env_func_tab, f.lamb = f.lamb, f.mu = f.mu, time.stop = tot_time, return.all.extinct = TRUE, max.size = 3000,
prune.extinct = T)$tree
}
size = c(size, length(phylo$tip.label))
}
df = data.frame(a, size)
plot(ggplot(df, aes(x=a, y = size)) + geom_violin() + coord_flip())
# Setting the parameters
if (extinction_rate == "const") {
par <- c(0.05, 0.01, 1.3, -0.2)
names(par) = par_names
} else if (extinction_rate == "ratio") {
par <- c(0.08, 0.06, 2, -0.2)
names(par) = par_names
}
# Choice of the extinction rate
f.lamb <- function(t, env){par[1]*exp(env%*%par[3:4])}
if (extinction_rate == "const") {
f.mu <- function(t, env){par[2]}
} else if (extinction_rate == "ratio") {
f.mu <- function(t, env){par[2]*f.lamb(t, env)}
}
phylo <- NULL
while(class(phylo) != "phylo"){
phylo <- sim_env_bd_mod_c(env.func = env_func_tab, f.lamb = f.lamb, f.mu = f.mu, time.stop = tot_time,
max.size = 3000, return.all.extinct = TRUE, prune.extinct = TRUE)$tree
}
plot(phylo)
size = c()
for (i in 1:100){
phylo <- NULL
while(class(phylo) != "phylo"){
phylo <- sim_env_bd_mod_c(env.func = env_func_tab, f.lamb = f.lamb, f.mu = f.mu, time.stop = tot_time, return.all.extinct = TRUE, max.size = 3000,
prune.extinct = T)$tree
}
size = c(size, length(phylo$tip.label))
}
df = data.frame(a = rep(1, 100), size)
plot(ggplot(df, aes(x=a, y = size)) + geom_violin() + coord_flip())
# Setting the parameters
if (extinction_rate == "const") {
par <- c(0.06, 0.01, 1.3, -0.2)
names(par) = par_names
} else if (extinction_rate == "ratio") {
par <- c(0.08, 0.06, 2, -0.2)
names(par) = par_names
}
# Choice of the extinction rate
f.lamb <- function(t, env){par[1]*exp(env%*%par[3:4])}
if (extinction_rate == "const") {
f.mu <- function(t, env){par[2]}
} else if (extinction_rate == "ratio") {
f.mu <- function(t, env){par[2]*f.lamb(t, env)}
}
size = c()
for (i in 1:100){
phylo <- NULL
while(class(phylo) != "phylo"){
phylo <- sim_env_bd_mod_c(env.func = env_func_tab, f.lamb = f.lamb, f.mu = f.mu, time.stop = tot_time, return.all.extinct = TRUE, max.size = 3000,
prune.extinct = T)$tree
}
size = c(size, length(phylo$tip.label))
}
df = data.frame(a = rep(1, 100), size)
plot(ggplot(df, aes(x=a, y = size)) + geom_violin() + coord_flip())
# Setting the parameters
if (extinction_rate == "const") {
par <- c(0.08, 0.01, 1.3, -0.2)
names(par) = par_names
} else if (extinction_rate == "ratio") {
par <- c(0.08, 0.06, 2, -0.2)
names(par) = par_names
}
# Choice of the extinction rate
f.lamb <- function(t, env){par[1]*exp(env%*%par[3:4])}
if (extinction_rate == "const") {
f.mu <- function(t, env){par[2]}
} else if (extinction_rate == "ratio") {
f.mu <- function(t, env){par[2]*f.lamb(t, env)}
}
size = c()
for (i in 1:100){
phylo <- NULL
while(class(phylo) != "phylo"){
phylo <- sim_env_bd_mod_c(env.func = env_func_tab, f.lamb = f.lamb, f.mu = f.mu, time.stop = tot_time, return.all.extinct = TRUE, max.size = 3000,
prune.extinct = T)$tree
}
size = c(size, length(phylo$tip.label))
}
df = data.frame(a = rep(1, 100), size)
plot(ggplot(df, aes(x=a, y = size)) + geom_violin() + coord_flip())
extinction_rate = "ratio"
# Setting the parameters
if (extinction_rate == "const") {
par <- c(0.08, 0.01, 1.3, -0.2)
names(par) = par_names
} else if (extinction_rate == "ratio") {
par <- c(0.08, 0.01, 1.3, -0.2)
names(par) = par_names
}
# Choice of the extinction rate
f.lamb <- function(t, env){par[1]*exp(env%*%par[3:4])}
if (extinction_rate == "const") {
f.mu <- function(t, env){par[2]}
} else if (extinction_rate == "ratio") {
f.mu <- function(t, env){par[2]*f.lamb(t, env)}
}
size = c()
for (i in 1:100){
phylo <- NULL
while(class(phylo) != "phylo"){
phylo <- sim_env_bd_mod_c(env.func = env_func_tab, f.lamb = f.lamb, f.mu = f.mu, time.stop = tot_time, return.all.extinct = TRUE, max.size = 3000,
prune.extinct = T)$tree
}
size = c(size, length(phylo$tip.label))
}
df = data.frame(a = rep(1, 100), size)
plot(ggplot(df, aes(x=a, y = size)) + geom_violin() + coord_flip())
